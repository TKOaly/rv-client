import { Client } from '../client';

<% typedefs.forEach((td) => { %><% if (td.description) { %>
/** <% td.description.split('\n').forEach((line) => { %>
 * <%- line %><% }) %>
 */ <%} if (td.type === 'object') { %>
export interface <%- td.name %> { <% Object.entries(td.properties).forEach(([name, prop]) => { %><% if (prop.jsdoc) { %>
  /** <% prop.jsdoc.split('\n').forEach((line) => { %>
   * <%- line %><% }) %>
   */ <%}%>
  <%- name %>: <%- prop.type %>;<% }) %>
} <% } else if (td.type === 'array') { %>
export type <%- td.name %> = <%- td.item %>[];
<% } else if (td.type === 'enum') { %>
export type <%- td.name %> = <%- td.variants.join(' | ') %>;
<% } else if (td.type === 'union') { %>
export type <%- td.name %> = <%- td.members.join(' & ') %>;
<% } %>
<% }) %>
<% apis.forEach((api) => { %>
export class <%- api.name %> extends Client {
    constructor(parent?: Client) {
        super(new Client(parent<%- api.path ? `, '${ api.path }'` : '' %>));
    }
    <% api.operations.forEach((operation) => { %>
    /** <% operation.jsdoc.split('\n').forEach((line) => { %>
     * <%- line %><% }) %>
     */
    async <%- operation.name %>(<%- operation.parameters.map(p => `${p.name}: ${p.type}`).join(', ') %>): Promise<<%- operation.returnType %>> {
        let res = await this.request({
            path: `<%- operation.path.replace(/{([^{}]+)}/, (_, match) => `\${${match}}`) %>`,
            method: '<%- operation.method %>',
        });
	<% if (operation.responses.length > 0) { %>
	<% for (const { contentType, statusCode, translation } of operation.responses) { %>
	if (res.status === <%- statusCode %> && res.headers['Content-Type'] === '<%- contentType %>') {
	    return res.<%- translation %>;
	} else <% } %> {
	    return res;
	}

        return res<%- operation.responseTranslation ? '.' + operation.responseTranslation : '' %>;
	<% } else { %>
	return res;
	<% } %>
    }
    <% }) %>
}
<% }) %>
